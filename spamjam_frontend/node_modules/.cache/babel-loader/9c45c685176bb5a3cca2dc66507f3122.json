{"ast":null,"code":"import _classCallCheck from \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { client_id } from './config.js';\nimport { loadReCaptcha } from 'react-recaptcha-google';\nvar SPAM_JAM_API_URL = \"http://localhost:3000/spam_types\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false,\n      victimEmail: \"\",\n      spamType: \"\",\n      spamNumber: 1,\n      allSpamTypes: \"\" //state\n\n    };\n\n    _this.saveTheStuff = function (data) {\n      _this.setState({\n        allSpamTypes: data,\n        loaded: true\n      });\n    };\n\n    _this.getSpamTypes = function () {\n      fetch(SPAM_JAM_API_URL).then(function (data) {\n        return data.json();\n      }).then(_this.saveTheStuff);\n    };\n\n    _this.handleTypeChange = function (e) {\n      var foundType = _this.state.allSpamTypes.find(function (type) {\n        return type.name === e.target.value;\n      });\n\n      _this.setState({\n        spamType: foundType\n      });\n    };\n\n    _this.handleEmailChange = function (e) {\n      _this.setState({\n        victimEmail: e.target.value\n      });\n    };\n\n    _this.handleNumberChange = function (e) {\n      _this.setState({\n        spamNumber: e.target.value\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      if (e.target[4].value != \"\") {\n        fetch('http://localhost:3000/spam_emails', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            spam_email: e.target[0].value,\n            type: e.target[1].value,\n            contents: e.target[2].value,\n            num_emails: e.target[3].value\n          })\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      loadReCaptcha();\n      this.getSpamTypes();\n    } //componentDidMount\n\n  }, {\n    key: \"render\",\n    //handleSubmit\n    value: function render() {\n      var style = {\n        maxHeight: '400px',\n        minHeight: '400px',\n        resize: 'none',\n        padding: '9px',\n        boxSizing: 'border-box',\n        fontSize: '15px'\n      };\n      var numberArray = [];\n\n      for (var i = 1; i <= 50; i++) {\n        numberArray.push(i);\n      }\n\n      if (this.state.loaded) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"SPAM JAM 2.0\")), React.createElement(\"form\", {\n          onSubmit: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"Victim Email\"), React.createElement(\"input\", {\n          type: \"text\",\n          defaultValue: \"someone@something.com\",\n          onChange: this.handleEmailChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"Spam Type\"), React.createElement(\"select\", {\n          onChange: this.handleTypeChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          key: \"blank\",\n          value: \"blank\",\n          default: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }), this.state.allSpamTypes.map(function (type) {\n          return React.createElement(\"option\", {\n            key: type.name,\n            value: type.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }, type.name);\n        }))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"textarea\", {\n          style: style,\n          placeholder: \"select a spam type\",\n          value: this.state.spamType != null ? this.state.spamType.template : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          onChange: this.handleNumberChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, numberArray.map(function (number) {\n          return React.createElement(\"option\", {\n            key: number,\n            value: number,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, number);\n        }))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"g-recaptcha\",\n          \"data-sitekey\": client_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        })))));\n      } else {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"LOADING THING HERE...\");\n      }\n    } //render\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/disalvo/Desktop/Dev_MMBP/Mod6/spamjam2/spamjam_frontend/src/App.js"],"names":["React","Component","client_id","loadReCaptcha","SPAM_JAM_API_URL","App","state","loaded","victimEmail","spamType","spamNumber","allSpamTypes","saveTheStuff","data","setState","getSpamTypes","fetch","then","json","handleTypeChange","e","foundType","find","type","name","target","value","handleEmailChange","handleNumberChange","handleSubmit","preventDefault","method","headers","body","JSON","stringify","spam_email","contents","num_emails","style","maxHeight","minHeight","resize","padding","boxSizing","fontSize","numberArray","i","push","logo","map","template","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { client_id } from './config.js';\nimport { loadReCaptcha } from 'react-recaptcha-google'\n\nconst SPAM_JAM_API_URL = `http://localhost:3000/spam_types`\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    victimEmail: \"\",\n    spamType: \"\",\n    spamNumber: 1,\n    allSpamTypes: \"\",\n  }//state\n\n  componentDidMount() {\n    loadReCaptcha()\n    this.getSpamTypes()\n  }//componentDidMount\n\n  saveTheStuff= (data) => {\n    this.setState({\n      allSpamTypes: data,\n      loaded: true,\n    })\n  }\n\n  getSpamTypes = () => {\n    fetch(SPAM_JAM_API_URL)\n    .then(data => data.json())\n    .then(this.saveTheStuff)\n  }\n\n  handleTypeChange = (e) => {\n    const foundType = this.state.allSpamTypes.find( type => {\n      return type.name === e.target.value\n    })\n    this.setState({\n      spamType: foundType\n    })\n  }//handleTypeChange\n\n  handleEmailChange = (e) => {\n    this.setState({\n      victimEmail: e.target.value\n    })\n  }//handleEmailChange\n\n  handleNumberChange = (e) => {\n    this.setState({\n      spamNumber: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    if (e.target[4].value != \"\") {\n      fetch('http://localhost:3000/spam_emails', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          spam_email: e.target[0].value,\n          type: e.target[1].value,\n          contents: e.target[2].value,\n          num_emails: e.target[3].value,\n        })\n      })\n    }\n\n  }//handleSubmit\n\n  render() {\n    const style = {\n      maxHeight:'400px',\n      minHeight:'400px',\n      resize:'none',\n      padding:'9px',\n      boxSizing:'border-box',\n      fontSize:'15px'\n    };\n\n    let numberArray = []\n    for(var i = 1; i <= 50; i++){\n      numberArray.push(i)\n    }\n\n    if(this.state.loaded){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <div>\n              <h1>SPAM JAM 2.0</h1>\n            </div>\n            <form onSubmit={this.handleSubmit}>\n              <div>\n                <label>Victim Email</label>\n                <input type=\"text\" defaultValue=\"someone@something.com\" onChange={this.handleEmailChange} />\n              </div>\n              <div>\n                <label>Spam Type</label>\n                <select onChange={this.handleTypeChange}>\n                  <option key=\"blank\" value=\"blank\" default></option>\n                  {this.state.allSpamTypes.map(type => (\n                    <option key={type.name} value={type.name}>{type.name}</option>\n                  ))}\n                </select>\n              </div>\n              <br></br>\n              <div>\n                <textarea\n                  style={style}\n                  placeholder=\"select a spam type\"\n                  value={this.state.spamType != null ? this.state.spamType.template : \"\"}\n                />\n              </div>\n              <div>\n                <select onChange={this.handleNumberChange}>\n                  {numberArray.map(number => (\n                    <option key={number} value={number}>{number}</option>\n                  ))}\n                </select>\n              </div>\n              <br></br>\n              <div className=\"g-recaptcha\" data-sitekey={client_id}></div>\n              <div>\n                <input type=\"submit\" value=\"Submit\" />\n              </div>\n            </form>\n\n          </header>\n        </div>\n      );\n    }\n    else{\n      return (\n        <p>LOADING THING HERE...</p>\n      );\n    }\n\n  }//render\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}